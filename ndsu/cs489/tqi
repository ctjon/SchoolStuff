                    TQI-TOTAL QUALITY IMPROVEMENT
                    (taken from various sources, including NDSU, OSU..)

TQI is a set of principles and tools used to improve the way we don things.
This does not imply that we don't do things right.  TQI means we can do things 
better and start with a commitment to seek improvement from the top to
the bottom, bottom to top, and from side to side.  Everyone in the
organization in an important contributor to the continued improvement of
the organization.  TQI provides the tools you need to make a difference
in your corner.


Key Points of TQI

1.  Focus on those you serve                              customer focus

2.  Improve your work process systematically              process improvement  

3.  Empower the people who actually do the job            empower workers

4.  Continually educate yourself and others               educate all

5.  Think in the long-term                                long-term thinking

6.  Commit yourself to quality                            quality commitment

7.  Quality is a verb, not a noun                         process focus


To implement a successful TQI initiative, an organization must be
receptive to the following factors (Deming):
     commitment
     action
     change
     data gathering.

With these components, a plan of action can be developed to provide a
direction for continued improvement of the organization.  The following
TQI PROJECT PROCESS MODEL is an attempt to assist in this plan of action.


                       THE PROJECT PROCESS MODEL
                       -------------------------

I.   Introduction to TQI


II.  Identify the Project


III. Identify the Team


IV.  Analyze the Project

       a. Identify and survey the customers

       b. Develop issue statements

       c. Does chair or head agree?
             No?  return to b.
             Yes? continue.

       d. Flowchart the process

       e. Develop process performance measures

       f. Find critical causes

       g. Collect data and analyze


V.   Develop Solutions


VI.  PROCESS IMPROVEMENT:  Plan,  Do,  Check,  Act  (Enhanced Shewhart Cycle)

       PLAN:  
              Identify process(es) needing improvement
                 What does your work area do that could be improved?
                 Why should it be improved?
                 Who is affected by this process?
                 Who benefits if we make the improvements?
                 How will they benefit?

              Organize a team
                 Who know how the process works?
                 Who has the right skills for the project?

              Flowchart the process(es)
                 How do you do it now?
                 What are the steps you take or methods you use?
                 What data is available about the process?
                 What data do you need?

              Identify trouble spots
                 What steps/methods course the problem/delay?  Why?

              Gather data, observations, or inputs
                 What is your baseline?
                 What do your clients think could be improved in this process?

              Identify alternatives
                 What are a couple of ways to make it better?
                 What are advantages & disadvantages of these different ways?
                 Can some of your suggested improvements be combined?

              Complete flowchart with new process(es)
                 Put your improvements on paper



        DO:
              Implement new process on a small scale to test your alternatives.
                 How do we do it?
                 Do we need anything that we don't have already?
                 Can we do pieces and put the pieces together?
                 Is our small scale an accurate representative of the whole?
                 
              
        CHECK:
              Gather data on the results of the new process(es)
              
              Determine if new process(es) are an improvement
                 Is it working?
                 Do we need to fine tune any parts?
                 What do those who are affected by process think of changes?
                 
              Modify the new process(es) based on data/input from those affected
                 
              If they are not an improvement return to PLAN.


        ACT:
              if CHECK.Determine_if_new_process_improves = yes,
              then make permanent change
              else do PLAN.

                 Did we identify the right problem?
                 Should we make the change permanent?
                 Has it been worth the effort?
                 
              Inform those who are affected by the process about the change



VII. Standardize Process

       a. Return to IV.




W. Edwards Deming's Fourteen Points for Quality Improvement in a Company:

1. Create constancy of purpose for improvement of product and service.
	- radical new definition of company's role:
		-Rather than to make money,
			stay in busness
			provide jobs trhough innoviation,
					     research,
				             constant improvement & maintenance.
2. Adopt the new philosophy.
	- US too tolerant of poor workmanship and sullen service
	- need new religion in which mistakes & negativism unacceptable.

3. Cease dependence on mass inspection.
	- US firms typically inspect a product; off assembly line
						at major stages along the way
	- defectives thrown out out|reworked (both unnecessary, expensive)
		- firm paying workers to make defects & then correct them.
	- quality comes, not from inspection, but inprovement in the process.
	- workers can be enlisted in this improvement.

4. End practive of awarding business on the price tag alone.
	- purchasing ordered to seek lowest-priced venor.
	- leads to low quality
	- instead, should seek best quality in long-term relationship with
	           single supplier for any one item.

5. Improve constantly and forever, the system of production & service.
	- Improvement not a 1-time effort.
	- Mgmt obligated to continually seek reduced waste and improved quality.

6. Institute education and training.
	- often worker learns job from another worker, who was not well trained
	- often workers forced to follow poor instructions.
	-research IS education (educating world at large with general solutions)

7. Institute leadership.
	- job of supervisor not to tell what to do or punish, but lead
	- leading = help people do better job
		    learning by objective methods who needs help

8. Drive out fear.
	- many employees afraid to ask questions or take positions
	- will continue to do things wrong wrong or not at all
	  (better to ask a "dumb" question and appear foolish for a moment
		than to remain proudly ignorant for the rest of your life)
	- ecomonic loss from fear is appalling!
	- to assure quality and productivity, people must feel secure.

9. Break down barriers between staff areas.
	- often depts are comteting with each other or have conflicting goals
	- don't work as a team so they can solve or forsee problems
	- worse, 1 dept's goals cause trouble for another (why pay for that?)

10. Eliminate slogans, exhortations, targets for workforce.
	- never hlep anyone do a better job
	- let workers formulate their own slogans

11. Eliminate numerical quotas.
	- quotas take into account only numbers, not quality or methods
	- usually guarantee inefficiency and high cost
	- person, to hold job, meets quota at any cost, regardless damage to Co.

12. Remove barriers to pride of workmanship
	- people eager to do good job and distressed when they cannot
	- too often, misguided boss,
		     faulty equip,
		     defective materials
	                 block good performance (must be removed)

13. Institute vigorous program of education and retraining.
	- both mgmt & workforce need education in new methods, including
		teamwork,
		statistical techniques.

14. Take action to accomplish the transformation.
	- takes top mgmt team with plan of action to carry out quality mission
	- workers can't do it alone, nor can mgmt
	- critical mass of Co. people must understand 14 pts and 7 deadly sins:


SEVEN DEADLY SINS:

1. Lack of constancy of purpose.
	- Company without constancy of purpose has no long-range plans
	      for staying in business.
	- Mgmt is insecure and so are employees.

2. Emphasis on short-term profits.
	- focus on increase quarterly dividend undermines quality & productivity

3. Evaluation by performance, merit rating or annual review of performance.
	- effects are devastating-
			teamwork destroyed
			rivalry nurtured.
	- preformance ratins build fear & cause bitterness, despondency, beaten
	- preformance ratings encourage defection in mgmt ranks

4. Mobility of mgmt
	- Job-hopping mgrs never understand Co. they work for and
			   never there long enough to follow thru on long-term
			        changes necessary for quality and productivity.

5. Running a Co. on visible figures alone
	- most important figures are unknown & unknowable
		- multiplier effect of happy customers, for example.

6. Excessive medical costs for employees health care, increases final costs of
	goods and services.

7. High warranty costs, fueled by lawyers working on basis of contigency fees.



Deming's points out Obstacles.  Obastacles are easier to
cure than the deadly sins.

OBSTACLES
---------
Among the Obastacles to TQI are the folowing:

1. Hope of instant pudding.
	- idea that TQI accomplished suddenly by an affirmation of faith

2. Supposition that solving problems, automation, gadgets, and new things
   will transform enterprise.

3. Search for examples
	- Co.'s undertake search for example ready-made recipe they can follow.
	- must, instead, map their own route to quality.
		- every company is different
			- BECAUSE, at least, their personnel are not the same
			  as another company.

4. Our problems are different
	- pretext managers raise to avoid dealing with quality issues

5. Our quality control department takes care of our problems of quality
	- another excuse managers use to avoid taking responsibility

6. Supposition that it is only necessary to meet specifications
	- not only may products meet specs, yet vary widely in quality,
	  but in addition, supposition that everthing is all right is
	  inside the specs and wrong outside specs is not realistic.


Other things Deming teaches:


85-15 rule:
	- 85% of what goes wrong is with the system, only 15% with the people.


Know thy customer.
	- new way or thinking about customer required.
	- customers no longer accept what is produced.
	- with customer as reference point, priorities become easier to set.
	- "customer" must describe relationship in which services are exchanged
	             not money changing hands
	- in restaurant, for example: waitress's cust not only patron but cook 
			 cook's performance is affected by legibility of order
		 Once order filled, waitress becomes cook's customer,
			 Must be well-prepared, so waitress can serve with pride
	- Too often department does not understand how its work used by next
		thus can't learn what is important.
	- INTERNAL CUSTOMER notion absolutely critical to quality transformation


The PDCA cycle:  Plan, Do, Act, Check

       PLAN:  
              Identify process(es) needing improvement
                 What does your work area do that could be improved?
                 Why should it be improved?
                 Who is affected by this process?
                 Who benefits if we make the improvements?
                 How will they benefit?

              Organize a team
                 Who know how the process works?
                 Who has the right skills for the project?

              Flowchart the process(es)
                 How do you do it now?
                 What are the steps you take or methods you use?
                 What data is available about the process?
                 What data do you need?

              Identify trouble spots
                 What steps/methods course the problem/delay?  Why?

              Gather data, observations, or inputs
                 What is your baseline?
                 What do your clients think could be improved in this process?

              Identify alternatives
                 What are a couple of ways to make it better?
                 What are advantages & disadvantages of these different ways?
                 Can some of your suggested improvements be combined?

              Complete flowchart with new process(es)
                 Put your improvements on paper



        DO:
              Implement new process on a small scale to test your alternatives.
                 How do we do it?
                 Do we need anything that we don't have already?
                 Can we do pieces and put the pieces together?
                 Is our small scale an accurate representative of the whole?
                 
              
        CHECK:
              Gather data on the results of the new process(es)
              
              Determine if new process(es) are an improvement
                 Is it working?
                 Do we need to fine tune any parts?
                 What do those who are affected by process think of changes?
                 
              Modify the new process(es) based on data/input from those affected
                 
              If they are not an improvement return to PLAN.


        ACT:
              if CHECK.Determine_if_new_process_improves = yes,
              then make permanent change
              else do PLAN.

                 Did we identify the right problem?
                 Should we make the change permanent?
                 Has it been worth the effort?
                 
              Inform those who are affected by the process about the change



     Standardize Process:     Return to PLAN.


American managers pride themselves on hunches and intuition.
	- when they succeed, they take credit, when they fail they blame.
	- quality transformation depends on rests on different assumptions

	Decisions must be based on facts
	People who know the work best must be the ones who perform it
	Groups working in teams can have more success than individuals
	Teams need training in structured problem-solving process, including
		HOW TO CONDUCT A MEETING
		- Robert's rules of order.
			- necessary, unnecessary???????????????
			- what do you think?
	Helpful to display information graphically
		- dataflow diagrams and flow charts (flow of activity analysis)
		- Cause-effect charts
		- Pareto charts (bar chart, rank causes for assigning priorities
		- Run Charts (show results of process plotted over time (sales..
		- Histograms (measure frequency of occurrence
		- scatter diagrams (relationship between two variables)
		- Control Charts (relfect system variation - runcharts with
			upper and lower limits - tell when system in control)




VERY USEFUL GRAPHICAL DESIGN METHODS for Computer Software Designers:

CONSTANTINE-YOURDON STRUCTURED DESIGN:
     * Selection and organization of modules & interfaces to provide outline
       to a well-structure problem.
     * Development of a blueprint of computer system solution to problem having
       same components and inter-relationships among components as problem.
         - allows form of problem to guide form of solution (Bauhaus design)
         - Partition problem into manageable sized pieces (modules) - black box
         - graphic representations encouraged (picture worth 1000 words)
         - Begins with well-defined problem (provided by structured analysis)
         - provides criteria for evaluation
     * HOW IT WORKS: partition in to modules & organize modules into hierarchy
         - module is black box to begin with; describe what is does, not how yet
         - like stereo component: know inputs, action (what, not how), outputs

     * CONSTANTINE-YOURDON STRUCTURED SPECIFICATION
          - DATA FLOW DIAGRAM (bubble chart showing flow of data thru system
                 of data transforms - bubbles=transforms, lines=data flows)
               -PROCESS = component which transforms data (indicated by bubble)
               -DATA FLOW = directed line  - flow of data between 2 processes
               -DATA STORE = FILE = data repository (held long time or accessed
                                    in an order other than order of arrival)
                    - denoted:  ____________
                                 FILE NAME
                                ____________
          - Data Flow Diagram can be LEVELED into hierarchy where
               - Each new level gives further breakdown of bubble from previous

          - DFD creation steps:
               1. Start at outside, draw all i/o
               2. Work from outside-in
               3. Give data flows and files names and record in DATA DICTIONARY
               4. Get agreement at each level before proceeding to next
               5. Use REJECT STUBS for exceptional data (data in error, etc)
               6. Don't flowchart or show control
               7. Draw something, then concentrate on improvement
               8. Assume steady state (don't show opening of files, etc.)
               9. TELLTALE symptoms of error:
                    a. WOM's (dead-end dataflows - entered but never left)
                    b. Magic Data (comes from nowhere)
                    c. Unnamable data and processes
                    d. Complicated dataflows

           -DATA DICTIONARY = Define all data names and content, files, etc.
                 Data is classified as SEQUENCE, REPETITION, SELECTION

                  LONG FORM                 SHORT FORM      JACKSON DIAGRAM
                                                                 A
   SEQUENCE:     A is B & C & D              A=B+C+D           / | \
                                                              B  C  D

                                                                 E
   REPETITION:   E is iterations of F        E={F}               |
                                                               1`-->5
                                                                 |
                                                                 F

   SELECTION:    G is either H or I or J     G=[H|I|J]           G
                                                                 /\
                                                                 \/
                                                               /  |  \
                                                              H   I   J

              -in DATA DICTIONARY (DD) keep defining data elements until
               cannot be partitioned further (self-defining terms or values)


     *CONSTANTINE-YOURDON STRUCTURE CHART (structured encapsulation)
           (shows potential-call hierarchy of modules & comm between)
         - external view: inputs, outputs, function
         - internal view: mechanics (code), internal data
         - MODULE NAME: reflect WHAT it is responsible for whenever called.
         - Examples: COBOL=PARAGRAPH; PL/1,ALGOL,PASCAL=PROCEDURE; BASIC=SUBR
         - HOW TO WRITE on structure chart:

             ___________ <- - module to be          __________<- -pre-defined
            | COMPUTE   |         written          ||VALIDATE||    module
            | INTEREST<- - - name                  || TEL #  ||
            |___________|                          ||________||

         - If module A can potentially call modules B & C:
              (not when or how often, just potential)
                         _______ 
                        |   A   |
                       ^|_______|
                    a /  /  * \     ^
                     *  /  b \ \     \c
                    ___/__    v_\___  o
                   |  B   |  |  C   |
                   |______|  |______|

         - Data passes are indicated on structure chart
               DATA COUPLE = processing data passed (open circle at source end).
               FLAG (or control couple) = switch or "set & test" variable
                                          (blackened in circle at source end)
           (denotes B receives no input data upon call by A but returns  a
                    C receives data  b  & returns flag   c )


     *Tools for expressing policy or flow of control within modules
          - STRUCTURED ENGLISH = simple sentences, decisions, loops using
            command verbs, DD-terms, Reserved words (IF, FOR, DO, etc.)
    FLOWCHART             NS-CHART          STRUCTURED ENGLISH
         | copy|
         |_____|          -----------
            |            |   copy    |      copy...
          __V__          |___________|
sequence | get |         |   get     |      get......
         |_____|         |___________|
            |            |   set     |      set.....
          __V__          |___________|
         | set |
         |_____|

         |
         |<------.      .-------------.
       __V___    |      | cond        |
      |      |   |      |   __________|
loop  |action|   |      |  |          |     While condition, do Action
      |______|   |      |  |  action  |
         |       |      |  |          |
         V     t |      |__|__________|
       /cond\____|
       \    /
        \  /
         | false
         V

selection
          |
    T   /   \  F         ______________
  .___ /cond \ ---.     | \          / |
  |    \     /    |     |T \ cond   / F|
  |     \   /     |     |___\______/___|     
__V__     -     __V__   |       |      |    If condition, then A else B
| A  |         |  B  |  |  A    |  B   |
|____|         |_____|  |       |      |
  |_______________|     |_______|______|
          |
          V


USE STRUCTURE CHART TO EVALUATE QUALITY OF DESIGN,

1ST MEASURE = COUPLING: DEGREE OF INTERDEPENDENCE BETWEEN MODULES.
GOAL-LOW COUPLING (INDICATES WELL-PARTITIONED SYSTEM) ATTAINED BY:
   1.  Eliminating unnecessary relationships.
   2.  Reducing # of necessary relationships.
   3.  Easing tightness of necessary relationships.
Want low coupling because:
   Fewer connections, less ripple effect (bug in 1 shows in other)
   Independence: change 1 without having to  change other.
Types of coupling:  (loosest to tightest)
1.  Data coupling = single field or homogeneous table parameters avoid
            "Tramp" data = passed thru many modules unused.
2.  Stamp coupling = same data structure passed to 2 modules 
    troublesome if modules only need select fields creates unnecessary 
    dependencies or exposure.  Affects portability.
    Exposes module to more data than needed (accidental change) Starve modules!!
      dont bundle unrelated fields into artificial data structure.
3.  Control Coupling = 1 passes flag to control logic of other
        Passed down: Subordinate becomes somewhat transparent.
        Passed up:  Inversion of authority (telling boss what to do)
        Nag flag = control flag: tell receiver what to do (avoid)
        Descriptive flag: describes piece of data (receiver can decide)
        Hybrid couple = data + control in same parameter.

4.  Common coupling = 2 modules refer to same global data area
        COBOL data division, FORTRAN common block, PL/1 external data bad:
                bugs propagate, freezes names, double use of same area,
                obscures coupling, revisions difficult.

5.  Content coupling = 1 refers to the inside of another.
        1 branches or falls thru to another
        1 refers to or changes internal data of another
        1 alters statement of another.


COHESION (MODULE STRENGTH)
    Measure of strength of association of elements of module
        element = instruction, group of instructions, call to module
1.  Functional cohesion: one and only one problem related task
2.  Sequential cohesion: output of 1 activity in module input to another
3.  Communicational cohesion: elements use same I/O data
4.  Procedural cohesion: control flows from 1 activity to another
                (results from bottom up design - cop out)
5.  Temporal cohesion: elements involved in activities related in time 
                (end-of-day routine, initialization routine)
6.  Logical cohesion:  pick 1 activity from selection of many similar
7.  Coincidental cohesion: no cohesion.

ADDITIONAL CONSTANTINE-YOURDON DESIGN GUIDELINES:
FACTORING: (Separation of module into smaller modules)
        1. to reduce module size.
                1/2 pg code = good (debug speed inv. proper to # of fingers)
                Stop factoring when no more well-defined functions to factor 
                                      out or interfaces get too complicated.
                Don't worry about too much factoring, can always back off 
        2.  clarify (easier to understand, localize modifications)
        3.  sharing modules 
        4.  separate work (calculate, edit) from management (calls, decision)
                keep global decisions high, work low.
        5.  simplify implementation.

DECISION SPLITTING:
        (Splitting recognition part of decision far from execution part). 
        (Should be avoided if possible, but necessary if decision data & 
        execution data in different modules).

SYSTEM SHAPE:  4 module types; afferent efferent transform coordinate p(145)
Traditionally, group afferent stream on left (raw data low, logical high)
               transforms in middle.
               efferent stream on right.
        Physically input-driven systems (p146) and physically output-driven
        Balanced systems (top module deals with logical data:
                on afferent side, edited and unblocked.
                on efferent side, independent of report formats (p149)
                Cleaner to implement and easier to modify.

ERROR REPORTING:  (reported where found and understood  p150)

EDITING:  (Order of editing input data): (p152)
        entry errors - allow editing immediately
        edit syntactic (Ne;ada in STATE field) before semantic (Nevada in CITY)
        do single field edits before you cross validate fields
        edit internal before external

STATE MEMORY:  (data internal to module, survives form 1 call to next p153)
        should be avoided whenever possible (except GET CHAR from card, etc)
MATCHING PROGRAM STRUCTURE TO DATA STRUCTURE: (P154-157)
INFORMATION CLUSTER:  Set of modules used for every access to some data p159 
        can implement with one program and several entry points for each module.
INITIALIZATION/TERMINATION MODULES
        1 big init mod keeps initialization far from use points
        precludes reuse of single modules (they don't have own initializations).
        precludes reuse of parts of initialization.
RESTRICTIVITY/GENERALITY:
FAN OUT:  (Number of immediate subordinate modules from a given module)
        limit to <= 7 (cure by factoring out middle management mods, p169)
FAN-IN:  To a module is # of immediate bosses (high fan-in good, need cohesion.)
        each interface must have same # & types of parameters.


TRANSFORM ANALYSIS

STRATEGY (NOT ALGORITHM) FOR TURNING A DFD INTO A STRUCTURE CHART.

1.  Draw DFD

2.  Identify Central Transform (part of DFD containing essential functions)
        1st way: look at DFD!
        2nd way: prune afferent branches (from outside to most logical input)
                 prune efferent branches (outside to most logical output data-
                                          just been produced, yet unformatted)
                what's left is central transform (ex. p185)

3.  Produce First Cut Structure Chart
        i.  promote a central bubble to "boss" & let others hang (p185,190)
or     ii.  hire (define) new boss (let entire central transform be 1 bubble 
            and hang afferent & efferent branches from it)

4.  Revise First-Cut Structure Chart:
        Add read and write modules for accessing sources, sinks, files
        Factor & reorganize afferent & efferent streams
        Add error handling routines
        Add initialization and termination details
        Ensure module names right for hierarchy roles
        Show all necessary structure chart flags
        Check system shape, factoring, cohesion, decision-splitting.

5.  MAKE SURE DESIGN WORKS: make many, pick best.  There is no absolute best.


TRANSACTION ANALYSIS:

First Main Use: Cleave DFD into smaller DFDs - 1 for each major transaction 
  system processes (transaction=stimulus that triggers set of activities:
        Add, delete, bill, etc)
  These smaller DFDs then converted using transform analysis

Second Main Use: Combine individual structure charts for separate transactions
  into one larger chart that is flexible under user changes.

Transaction Analysis Principles:
  Each type of transaction in a separate module (transaction modules)
  Transaction-center module determines type from"tag" (transaction code)
  Calls appropriate transaction module & sends no data at all.
        (Implemented using case statement.  Cohesion may be bad)
  Factor to share common code 

Menu-driven on-line systems, example of transaction center 

Identifying Transactions on a DFD 
        If data flow enters bubble, bubble determines type & routes to 1 of 
        several alternative bubbles depending on type = transaction center.

OPTIMIZATION:  Making a run-time system more efficient.

EFFECTIVENESS:  Doing job correctly (following the structure chart)

USABILITY:  User-friendly, ample feedback, clear error message.

RELIABILITY:   Rarely breaks down, produces correct results, always available
  for use

MAINTAINABILITY:  No unfixable bugs, adaptable to keep us with users needs

EFFECTIVE:  Makes good use of resources, efficient.

STRUCTURED APPROACH TO OPTIMIZATION:  
Four part philosophy regarding optimization:
        1.  easier to get working system efficient than efficient system 
        working.
        2.  optimize system only if it fails a performance test.
        3.  simplicity bears its  own rewards.
        4.  optimize only those parts of a system worth optimizing (90-10 rule 
        90% of total run time devoted to 10% of code, so optimize the hot 
        spots)

MONITORING SYSTEM PERFORMANCE:  Hot spots shouldn't be guessed at.  Use the 
   execution profile.

TUNING THE SYSTEM
        Check physical interface to outside world (often consumes time)
                -superfluous intermediate files arise from superfluous steps
                -check buffer use and organization (double buffering etc.)
                -block size (caution, increasing doe not always increase effic)

Example:  The characteristics of IBM 3330 are: 2 msec = seek time 13000 
char/track, 25 msec/rotation, 800char/msec transfer rate, At a logical record 
size of 300 and a block size of 3000, how many bytes/track are waster?
read 60 consecutive records?
If the blocksize were 2700, how many bytes wasted/track?  How much time to 
read 60 consecutive records.

If a hot module algorithm is at fault, consider recoding it in more efficient 
language (assembly)?
Repackaging may improve efficiency.  Optimizing compilers?  For small tables, 
linear search is more efficient than binary.
Usually optimizlity and maintainability are diametric (one is gained at the 
price of the other.
