IMPLEMENTATION MODULE Points;

FROM MathLib0 IMPORT sqrt;

PROCEDURE DistanceToOrigin(P:Point):REAL;
(* REQUIRES : INPUT OF A COORDINATE
   MODIFIES : NOTHING
   EFFECTS  : RETURNS DISTANCE FORM POINT TO ORIGIN AS A REAL *)
BEGIN
  RETURN sqrt(P.X * P.X + P.Y * P.Y);
END DistanceToOrigin;

PROCEDURE AddPoints(P1,P2:Point; VAR Result:Point);
(* REQUIRES : INPUT OF TWO COORDINATES
   MODIFIES : NOTHING
   EFFECTS  : RETURNS THE SUM OF THE TWO POINTS *)
BEGIN
  Result.X := P1.X + P2.X;
  Result.Y := P1.Y + P2.Y;
END AddPoints;

PROCEDURE SubtractPoints(P1,P2:Point; VAR Result:Point);
(* REQUIRES : THE INPUT OF TWO POINTS
   MODIFIES : NOTHING
   EFFECTS  : RETURNS THE DIFFERENCE WHEN POINT 2 IS SUBTRACTED FROM
              POINT 1 *)
BEGIN
  Result.X := P1.X - P2.X;
  Result.Y := P1.Y - P2.Y;
END SubtractPoints;

PROCEDURE MultiplyPoints(P1,P2:Point; VAR Result: Point);
(* REQUIRES : THE INPUT OF TWO POINTS
   MODIFIES : NOTHING
   EFFECTS  : RETURNS THE PRODUCT OF THE POINTS *)
BEGIN
  Result.X := P1.X * P2.X - P1.Y * P2.Y;
  Result.Y := P1.X * P2.Y + P1.Y * P2.X;
END MultiplyPoints;

PROCEDURE DividePoints(P1,P2:Point; VAR Result:Point);
(* REQUIRES : THE INPUT OF TWO POINTS
   MODIFIES : NOTHING
   EFFECTS  : RETURNS THE QUOTIENT OF POINT 1 DIVIDED BY POINT 2 *)
BEGIN
  Result.X := (P1.X * P2.X - P1.Y * P2.Y)/(P2.X*P2.X+P2.Y*P2.Y);
  Result.Y := (P1.Y * P2.X - P1.X * P2.Y)/(P2.X*P2.X+P2.Y*P2.Y);
END DividePoints;

PROCEDURE ReflectOrigin(VAR P:Point);
(* REQUIRES : THE INPUT OF A POINT
   MODIFIES : THE VALUES OF THE POINTS
   EFFECTS  : RETURNS VALUES FOR THE POINTS AFTER REFLECTION ACCROSS
              THE ORIGIN *)
BEGIN
  P.X := -P.X;
  P.Y := -P.Y;
END ReflectOrigin;

END Points.
