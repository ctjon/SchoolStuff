DEFINITION MODULE LISTADT;

(***********************************************************************)
(*                                                                     *)
(*    DEFINITION MODULE LISTADT                                        *)
(*                                                                     *)
(*    WRITTEN BY :  CHRISTOPHER C. TJON                                *)
(*    FOR        :  DR. ERICKSON'S CS171                               *)
(*    NAID       :  110975-8                                           *)
(*    DATE DUE   :  19 JANUARY 1990                                    *)
(*                                                                     *)
(*    THIS DEFINITION MODULE IS A MODIFICATION OF THE LISTPOINTER      *)
(*    MODULE GIVEN ON PAGES 224 THRU 237 IN THE TEXT :                 *)
(*                                                                     *)
(*        A SECOND COURSE IN COMPUTER SCIENCE WITH MODULA-2            *)
(*                                                                     *)
(*        WRITTEN BY : DANIEL D. MCCRACKEN AND WILLIAM I. SALMON       *)
(*                                                                     *)
(***********************************************************************)

FROM InOut IMPORT Write, WriteLn, WriteString;
FROM Storage IMPORT ALLOCATE, DEALLOCATE, Available;
FROM Strings IMPORT String, CompareStr;

TYPE LIST; (* OPAQUE TYPE *)

TYPE ITEMTYPE = CARDINAL;  (* IMPORT THIS FROM A SEPERATE MODULE LATER *)


PROCEDURE CREATELIST(VAR L : LIST );
(***********************************************************************)
(* REQUIRES : NOTHING                                                  *)
(* MODIFIES : NOTHING                                                  *)
(* EFFECTS  : INITIALIZES LIST                                         *)
(***********************************************************************)


PROCEDURE ADDNODE ( VAR L   : LIST ;
                    NEWITEM : ITEMTYPE );

(***********************************************************************)
(* REQUIRES : THE LIST HAS BEEN INITIALIZED                            *)
(* MODIFIES : NOTHING                                                  *)
(* EFFECTS  : ADDS A NEW NODE TO THE LIST                              *)
(***********************************************************************)


PROCEDURE INSERTATFRONT(VAR   L : LIST;
                        NEWITEM : ITEMTYPE);

(***********************************************************************)
(* REQUIRES : THE LIST HAS BEEN INITIALIZED                            *)
(* MODIFIES : NOTHING                                                  *)
(* EFFECTS  : INSERTS A NODE AT THE FRONT OF THE LIST                  *)
(***********************************************************************)


PROCEDURE INSERTATEND (VAR L   : LIST;
                       NEWITEM : ITEMTYPE);

(***********************************************************************)
(* REQUIRES : THE LIST HAS BEEN INITIALIZED                            *)
(* MODIFIES : NOTHING                                                  *)
(* EFFECTS  : INSERTS A NODE AT THE END OF THE LIST                    *)
(***********************************************************************)


PROCEDURE INSERTAFTERKTH (VAR L       : LIST;
                              K       : CARDINAL;
                              NEWITEM : ITEMTYPE);

(***********************************************************************)
(* REQUIRES : THE LIST HAS BEEN INITIALIZED AND 0 < K <= LIST LENGTH   *)
(* MODIFIES : NOTHING                                                  *)
(* EFFECTS  : INSERTS A NODE AS THE Kth ELEMENT OF THE LIST            *)
(***********************************************************************)


PROCEDURE INSERTAFTERCONTENT (VAR L   : LIST;
                              CONTENT : ITEMTYPE;
                              NEWITEM : ITEMTYPE);

(***********************************************************************)
(* REQUIRES : THE LIST HAS BEEN INITIALIZED AND CONTENT IS IN LIST     *)
(* MODIFIES : NOTHING                                                  *)
(* EFFECTS  : INSERTS A NODE AFTER THE CONTENT SPECIFIED               *)
(***********************************************************************)


PROCEDURE INLIST (L          : LIST;
                  SEARCHITEM : ITEMTYPE) : BOOLEAN;

(***********************************************************************)
(* REQUIRES : THE LIST HAS BEEN INITIALIZED                            *)
(* MODIFIES : NOTHING                                                  *)
(* EFFECTS  : CHECKS TO SEE IF THE SPECIFIED ELEMENT IS IN THE LIST    *)
(***********************************************************************)


PROCEDURE DELETENODE (VAR L : LIST);

(***********************************************************************)
(* REQUIRES : THE LIST HAS BEEN INITIALIZED                            *)
(* MODIFIES : NOTHING                                                  *)
(* EFFECTS  : DELETES A SPECIFIED NODE FROM THE LIST                   *)
(***********************************************************************)


PROCEDURE DELETEKTH (VAR L : LIST;
                         K : CARDINAL);

(***********************************************************************)
(* REQUIRES : THE LIST HAS BEEN INITIALIZED AND 0 < K <= LISTLENGTH    *)
(* MODIFIES : NOTHING                                                  *)
(* EFFECTS  : DELETES THE Kth NODE FROM THE LIST                       *)
(***********************************************************************)


PROCEDURE LISTISEMPTY (L : LIST) : BOOLEAN;

(***********************************************************************)
(* REQUIRES : THE LIST HAS BEEN INITIALIZED                            *)
(* MODIFIES : NOTHING                                                  *)
(* EFFECTS  : RETURNS TRUE IF THE LIST IS EMPTY OTHERWISE FALSE        *)
(***********************************************************************)


PROCEDURE LISTLENGTH (L : LIST) : CARDINAL;

(***********************************************************************)
(* REQUIRES : THE LIST HAS BEEN INITIALIZED                            *)
(* MODIFIES : NOTHING                                                  *)
(* EFFECTS  : RETURNS THE LENGTH OF THE LIST                           *)
(***********************************************************************)


PROCEDURE MAKELISTEMPTY (VAR L : LIST);

(***********************************************************************)
(* REQUIRES : THE LIST HAS BEEN INITIALIZED                            *)
(* MODIFIES : NOTHING                                                  *)
(* EFFECTS  : MAKES THE LIST EMPTY                                     *)
(***********************************************************************)


PROCEDURE COPYLIST (OLDLIST     : LIST;
                    VAR NEWLIST : LIST);

(***********************************************************************)
(* REQUIRES : THE LIST HAS BEEN INITIALIZED                            *)
(* MODIFIES : NOTHING                                                  *)
(* EFFECTS  : COPIES THE LIST                                          *)
(***********************************************************************)


PROCEDURE CONCATLIST(VAR LEFT  : LIST;
                         RIGHT : LIST);

(***********************************************************************)
(* REQUIRES : THE LISTS HAVE BEEN INITIALIZED                          *)
(* MODIFIES : NOTHING                                                  *)
(* EFFECTS  : CONCATS TWO LISTS TOGETHER                               *)
(***********************************************************************)


PROCEDURE WRITELIST (L : LIST);

(***********************************************************************)
(* REQUIRES : THE LIST HAS BEEN INITIALIZED                            *)
(* MODIFIES : NOTHING                                                  *)
(* EFFECTS  : PRINTS OUT THE ELEMENTS IN THE LIST [TYPE = STRING]      *)
(***********************************************************************)


PROCEDURE RETURNITEM (L : LIST) : ITEMTYPE;

(***********************************************************************)
(* REQUIRES : THE LIST HAS BEEN INITIALIZED                            *)
(* MODIFIES : NOTHING                                                  *)
(* EFFECTS  : RETURNS THE ITEM FIELD OF THE NODE POINTED TO            *)
(***********************************************************************)


PROCEDURE NEXTNODE ( L : LIST ) : LIST;

(***********************************************************************)
(* REQUIRES : THE LIST HAS BEEN INITIALIZED                            *)
(* MODIFIES : NOTHING                                                  *)
(* EFFECTS  : RETURNS THE ITEM FIELD OF THE NEXT NODE                  *)
(***********************************************************************)


PROCEDURE ADVANCE ( VAR L : LIST );

(***********************************************************************)
(* REQUIRES : THE LIST HAS BEEN INITIALIZED                            *)
(* MODIFIES : NOTHING                                                  *)
(* EFFECTS  : MAKES L THE LIST BEGINNING AT THE NEXT NODE              *)
(***********************************************************************)


PROCEDURE LISTERROR(ERROR : String );

(***********************************************************************)
(* REQUIRES : NOTHING                                                  *)
(* MODIFIES : NOTHING                                                  *)
(* EFFECTS  : PRINTS OUT THE APPROPRIATE ERROR MESSAGE                 *)
(***********************************************************************)

END LISTADT.
