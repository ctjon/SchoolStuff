%!PS-Adobe-3.0 EPSF-2.0
%%Creator: Windows PSCRIPT
%%Title: Microsoft Word - RS232PRO.DOC
%%BoundingBox: 18 19 593 774
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%Pages: 0
%%BeginResource: procset Win35Dict 3 1
/Win35Dict 290 dict def Win35Dict begin/bd{bind def}bind def/in{72
mul}bd/ed{exch def}bd/ld{load def}bd/tr/translate ld/gs/gsave ld/gr
/grestore ld/M/moveto ld/L/lineto ld/rmt/rmoveto ld/rlt/rlineto ld
/rct/rcurveto ld/st/stroke ld/n/newpath ld/sm/setmatrix ld/cm/currentmatrix
ld/cp/closepath ld/ARC/arcn ld/TR{65536 div}bd/lj/setlinejoin ld/lc
/setlinecap ld/ml/setmiterlimit ld/sl/setlinewidth ld/scignore false
def/sc{scignore{pop pop pop}{0 index 2 index eq 2 index 4 index eq
and{pop pop 255 div setgray}{3{255 div 3 1 roll}repeat setrgbcolor}ifelse}ifelse}bd
/FC{bR bG bB sc}bd/fC{/bB ed/bG ed/bR ed}bd/HC{hR hG hB sc}bd/hC{
/hB ed/hG ed/hR ed}bd/PC{pR pG pB sc}bd/pC{/pB ed/pG ed/pR ed}bd/sM
matrix def/PenW 1 def/iPen 5 def/mxF matrix def/mxE matrix def/mxUE
matrix def/mxUF matrix def/fBE false def/iDevRes 72 0 matrix defaultmatrix
dtransform dup mul exch dup mul add sqrt def/fPP false def/SS{fPP{
/SV save def}{gs}ifelse}bd/RS{fPP{SV restore}{gr}ifelse}bd/EJ{gsave
showpage grestore}bd/#C{userdict begin/#copies ed end}bd/FEbuf 2 string
def/FEglyph(G  )def/FE{1 exch{dup 16 FEbuf cvrs FEglyph exch 1 exch
putinterval 1 index exch FEglyph cvn put}for}bd/SM{/iRes ed/cyP ed
/cxPg ed/cyM ed/cxM ed 72 100 div dup scale dup 0 ne{90 eq{cyM exch
0 eq{cxM exch tr -90 rotate -1 1 scale}{cxM cxPg add exch tr +90 rotate}ifelse}{cyP
cyM sub exch 0 ne{cxM exch tr -90 rotate}{cxM cxPg add exch tr -90
rotate 1 -1 scale}ifelse}ifelse}{pop cyP cyM sub exch 0 ne{cxM cxPg
add exch tr 180 rotate}{cxM exch tr 1 -1 scale}ifelse}ifelse 100 iRes
div dup scale 0 0 transform .25 add round .25 sub exch .25 add round
.25 sub exch itransform translate}bd/SJ{1 index 0 eq{pop pop/fBE false
def}{1 index/Break ed div/dxBreak ed/fBE true def}ifelse}bd/ANSIVec[
16#0/grave 16#1/acute 16#2/circumflex 16#3/tilde 16#4/macron 16#5/breve
16#6/dotaccent 16#7/dieresis 16#8/ring 16#9/cedilla 16#A/hungarumlaut
16#B/ogonek 16#C/caron 16#D/dotlessi 16#27/quotesingle 16#60/grave
16#7C/bar 16#82/quotesinglbase 16#83/florin 16#84/quotedblbase 16#85
/ellipsis 16#86/dagger 16#87/daggerdbl 16#89/perthousand 16#8A/Scaron
16#8B/guilsinglleft 16#8C/OE 16#91/quoteleft 16#92/quoteright 16#93
/quotedblleft 16#94/quotedblright 16#95/bullet 16#96/endash 16#97
/emdash 16#99/trademark 16#9A/scaron 16#9B/guilsinglright 16#9C/oe
16#9F/Ydieresis 16#A0/space 16#A4/currency 16#A6/brokenbar 16#A7/section
16#A8/dieresis 16#A9/copyright 16#AA/ordfeminine 16#AB/guillemotleft
16#AC/logicalnot 16#AD/hyphen 16#AE/registered 16#AF/macron 16#B0/degree
16#B1/plusminus 16#B2/twosuperior 16#B3/threesuperior 16#B4/acute 16#B5
/mu 16#B6/paragraph 16#B7/periodcentered 16#B8/cedilla 16#B9/onesuperior
16#BA/ordmasculine 16#BB/guillemotright 16#BC/onequarter 16#BD/onehalf
16#BE/threequarters 16#BF/questiondown 16#C0/Agrave 16#C1/Aacute 16#C2
/Acircumflex 16#C3/Atilde 16#C4/Adieresis 16#C5/Aring 16#C6/AE 16#C7
/Ccedilla 16#C8/Egrave 16#C9/Eacute 16#CA/Ecircumflex 16#CB/Edieresis
16#CC/Igrave 16#CD/Iacute 16#CE/Icircumflex 16#CF/Idieresis 16#D0/Eth
16#D1/Ntilde 16#D2/Ograve 16#D3/Oacute 16#D4/Ocircumflex 16#D5/Otilde
16#D6/Odieresis 16#D7/multiply 16#D8/Oslash 16#D9/Ugrave 16#DA/Uacute
16#DB/Ucircumflex 16#DC/Udieresis 16#DD/Yacute 16#DE/Thorn 16#DF/germandbls
16#E0/agrave 16#E1/aacute 16#E2/acircumflex 16#E3/atilde 16#E4/adieresis
16#E5/aring 16#E6/ae 16#E7/ccedilla 16#E8/egrave 16#E9/eacute 16#EA
/ecircumflex 16#EB/edieresis 16#EC/igrave 16#ED/iacute 16#EE/icircumflex
16#EF/idieresis 16#F0/eth 16#F1/ntilde 16#F2/ograve 16#F3/oacute 16#F4
/ocircumflex 16#F5/otilde 16#F6/odieresis 16#F7/divide 16#F8/oslash
16#F9/ugrave 16#FA/uacute 16#FB/ucircumflex 16#FC/udieresis 16#FD/yacute
16#FE/thorn 16#FF/ydieresis ] def/reencdict 12 dict def/IsChar{basefontdict
/CharStrings get exch known}bd/MapCh{dup IsChar not{pop/bullet}if
newfont/Encoding get 3 1 roll put}bd/MapDegree{16#b0/degree IsChar{
/degree}{/ring}ifelse MapCh}bd/MapBB{16#a6/brokenbar IsChar{/brokenbar}{
/bar}ifelse MapCh}bd/ANSIFont{reencdict begin/newfontname ed/basefontname
ed FontDirectory newfontname known not{/basefontdict basefontname findfont
def/newfont basefontdict maxlength dict def basefontdict{exch dup/FID
ne{dup/Encoding eq{exch dup length array copy newfont 3 1 roll put}{exch
newfont 3 1 roll put}ifelse}{pop pop}ifelse}forall newfont/FontName
newfontname put 127 1 159{newfont/Encoding get exch/bullet put}for
ANSIVec aload pop ANSIVec length 2 idiv{MapCh}repeat MapDegree MapBB
newfontname newfont definefont pop}if newfontname end}bd/SB{FC/ULlen
ed/str ed str length fBE not{dup 1 gt{1 sub}if}if/cbStr ed/dxGdi ed
/y0 ed/x0 ed str stringwidth dup 0 ne{/y1 ed/x1 ed y1 y1 mul x1 x1
mul add sqrt dxGdi exch div 1 sub dup x1 mul cbStr div exch y1 mul
cbStr div}{exch abs neg dxGdi add cbStr div exch}ifelse/dyExtra ed
/dxExtra ed x0 y0 M fBE{dxBreak 0 BCh dxExtra dyExtra str awidthshow}{dxExtra
dyExtra str ashow}ifelse fUL{x0 y0 M dxUL dyUL rmt ULlen fBE{Break
add}if 0 mxUE transform gs rlt cyUL sl [] 0 setdash st gr}if fSO{x0
y0 M dxSO dySO rmt ULlen fBE{Break add}if 0 mxUE transform gs rlt cyUL
sl [] 0 setdash st gr}if n/fBE false def}bd/font{/name ed/Ascent ed
0 ne/fT3 ed 0 ne/fSO ed 0 ne/fUL ed/Sy ed/Sx ed 10.0 div/ori ed -10.0
div/esc ed/BCh ed name findfont/xAscent 0 def/yAscent Ascent def/ULesc
esc def ULesc mxUE rotate pop fT3{/esc 0 def xAscent yAscent mxUE transform
/yAscent ed/xAscent ed}if [Sx 0 0 Sy neg xAscent yAscent] esc mxE
rotate mxF concatmatrix makefont setfont [Sx 0 0 Sy neg 0 Ascent] mxUE
mxUF concatmatrix pop fUL{currentfont dup/FontInfo get/UnderlinePosition
known not{pop/Courier findfont}if/FontInfo get/UnderlinePosition get
1000 div 0 exch mxUF transform/dyUL ed/dxUL ed}if fSO{0 .3 mxUF transform
/dySO ed/dxSO ed}if fUL fSO or{currentfont dup/FontInfo get/UnderlineThickness
known not{pop/Courier findfont}if/FontInfo get/UnderlineThickness get
1000 div Sy mul/cyUL ed}if}bd/min{2 copy gt{exch}if pop}bd/max{2 copy
lt{exch}if pop}bd/CP{/ft ed{{ft 0 eq{clip}{eoclip}ifelse}stopped{currentflat
1 add setflat}{exit}ifelse}loop}bd/patfont 10 dict def patfont begin
/FontType 3 def/FontMatrix [1 0 0 -1 0 0] def/FontBBox [0 0 16 16]
def/Encoding StandardEncoding def/BuildChar{pop pop 16 0 0 0 16 16
setcachedevice 16 16 false [1 0 0 1 .25 .25]{pat}imagemask}bd end/p{
/pat 32 string def{}forall 0 1 7{dup 2 mul pat exch 3 index put dup
2 mul 1 add pat exch 3 index put dup 2 mul 16 add pat exch 3 index
put 2 mul 17 add pat exch 2 index put pop}for}bd/pfill{/PatFont patfont
definefont setfont/ch(AAAA)def X0 64 X1{Y1 -16 Y0{1 index exch M ch
show}for pop}for}bd/vert{X0 w X1{dup Y0 M Y1 L st}for}bd/horz{Y0 w
Y1{dup X0 exch M X1 exch L st}for}bd/fdiag{X0 w X1{Y0 M X1 X0 sub dup
rlt st}for Y0 w Y1{X0 exch M Y1 Y0 sub dup rlt st}for}bd/bdiag{X0 w
X1{Y1 M X1 X0 sub dup neg rlt st}for Y0 w Y1{X0 exch M Y1 Y0 sub dup
neg rlt st}for}bd/AU{1 add cvi 15 or}bd/AD{1 sub cvi -16 and}bd/SHR{pathbbox
AU/Y1 ed AU/X1 ed AD/Y0 ed AD/X0 ed}bd/hfill{/w iRes 37.5 div round
def 0.1 sl [] 0 setdash n dup 0 eq{horz}if dup 1 eq{vert}if dup 2 eq{fdiag}if
dup 3 eq{bdiag}if dup 4 eq{horz vert}if 5 eq{fdiag bdiag}if}bd/F{/ft
ed fm 256 and 0 ne{gs FC ft 0 eq{fill}{eofill}ifelse gr}if fm 1536
and 0 ne{SHR gs HC ft CP fm 1024 and 0 ne{/Tmp save def pfill Tmp restore}{fm
15 and hfill}ifelse gr}if}bd/S{PenW sl PC st}bd/m matrix def/GW{iRes
12 div PenW add cvi}bd/DoW{iRes 50 div PenW add cvi}bd/DW{iRes 8 div
PenW add cvi}bd/SP{/PenW ed/iPen ed iPen 0 eq iPen 6 eq or{[] 0 setdash}if
iPen 1 eq{[DW GW] 0 setdash}if iPen 2 eq{[DoW GW] 0 setdash}if iPen
3 eq{[DW GW DoW GW] 0 setdash}if iPen 4 eq{[DW GW DoW GW DoW GW] 0
setdash}if}bd/E{m cm pop tr scale 1 0 moveto 0 0 1 0 360 arc cp m sm}bd
/AG{/sy ed/sx ed sx div 4 1 roll sy div 4 1 roll sx div 4 1 roll sy
div 4 1 roll atan/a2 ed atan/a1 ed sx sy scale a1 a2 ARC}def/A{m cm
pop tr AG m sm}def/P{m cm pop tr 0 0 M AG cp m sm}def/RRect{n 4 copy
M 3 1 roll exch L 4 2 roll L L cp}bd/RRCC{/r ed/y1 ed/x1 ed/y0 ed/x0
ed x0 x1 add 2 div y0 M x1 y0 x1 y1 r arcto 4{pop}repeat x1 y1 x0 y1
r arcto 4{pop}repeat x0 y1 x0 y0 r arcto 4{pop}repeat x0 y0 x1 y0 r
arcto 4{pop}repeat cp}bd/RR{2 copy 0 eq exch 0 eq or{pop pop RRect}{2
copy eq{pop RRCC}{m cm pop/y2 ed/x2 ed/ys y2 x2 div 1 max def/xs x2
y2 div 1 max def/y1 exch ys div def/x1 exch xs div def/y0 exch ys div
def/x0 exch xs div def/r2 x2 y2 min def xs ys scale x0 x1 add 2 div
y0 M x1 y0 x1 y1 r2 arcto 4{pop}repeat x1 y1 x0 y1 r2 arcto 4{pop}repeat
x0 y1 x0 y0 r2 arcto 4{pop}repeat x0 y0 x1 y0 r2 arcto 4{pop}repeat
m sm cp}ifelse}ifelse}bd/PP{{rlt}repeat}bd/OB{gs 0 ne{7 3 roll/y ed
/x ed x y translate ULesc rotate x neg y neg translate x y 7 -3 roll}if
sc B fill gr}bd/B{M/dy ed/dx ed dx 0 rlt 0 dy rlt dx neg 0 rlt cp}bd
/CB{B clip n}bd/ErrHandler{errordict dup maxlength exch length gt
dup{errordict begin}if/errhelpdict 12 dict def errhelpdict begin/stackunderflow(operand stack underflow)def
/undefined(this name is not defined in a dictionary)def/VMerror(you have used up all the printer's memory)def
/typecheck(operator was expecting a different type of operand)def
/ioerror(input/output error occured)def end{end}if errordict begin
/handleerror{$error begin newerror{/newerror false def showpage 72
72 scale/x .25 def/y 9.6 def/Helvetica findfont .2 scalefont setfont
x y moveto(Offending Command = )show/command load{dup type/stringtype
ne{(max err string)cvs}if show}exec/y y .2 sub def x y moveto(Error = )show
errorname{dup type dup( max err string )cvs show( : )show/stringtype
ne{( max err string )cvs}if show}exec errordict begin errhelpdict errorname
known{x 1 add y .2 sub moveto errhelpdict errorname get show}if end
/y y .4 sub def x y moveto(Stack =)show ostack{/y y .2 sub def x 1
add y moveto dup type/stringtype ne{( max err string )cvs}if show}forall
showpage}if end}def end}bd end
%%EndResource
/SVDoc save def
%%EndProlog
%%BeginSetup
Win35Dict begin
ErrHandler
%%EndSetup
SS
0 0 25 25 798 1100 300 SM
32 0 0 63 63 0 0 0 56 /Times-Roman /font32 ANSIFont font
0 0 0 fC
916 1042 567 (RS-232 BUS Proposal) 567 SB
1114 1116 172 (EE471) 172 SB
1043 1190 313 (Spring 1994) 313 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
1085 2077 229 (Tim Brown) 229 SB
1094 2136 211 (Joe Dunne) 211 SB
1096 2195 207 (Rick Liess) 207 SB
1091 2254 217 (Odi Otiaba) 217 SB
EJ RS
%%PageTrailer
SS
0 0 25 25 798 1100 300 SM
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
0 0 0 fC
2079 77 21 (2) 21 SB
32 0 0 63 63 1 0 0 58 /Times-Bold /font29 ANSIFont font
300 514 805 (RS-232 Bus Data Link Layer:) 805 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
450 647 1594 (The physical layer of the RS-232 network will consist of basically a twisted pair.) 1594 SB
300 706 1703 (One of  the wires will serve as the transmit and receive line, the other one is a ground.) 1703 SB
300 765 1726 (The RS-232 network will provide a means of transporting data to and from our project) 1726 SB
300 824 1751 (over the internet.  Thus it will be possible to get sensor information, and operate sensors) 1751 SB
300 883 1697 (from anywhere in the world.  This is phase one of the proposal, and it is probable that) 1697 SB
300 942 959 (some of this will change as the network evolves.) 959 SB
450 1001 1594 (The network first of all needs the wires to connect the two computers.  This will) 1594 SB
300 1060 1771 (be done over the RS-232 serial port on each ECB and on the Pentium server.  Each cable) 1771 SB
300 1119 1771 (will consist of a simple circuit, shown as follows and two wires connecting to every other) 1771 SB
300 1178 1748 (ECB and Pentium.  A light emitting diode is used instead of a regular diode to provide a) 1748 SB
300 1237 1572 (basic mechanism to watch "network traffic".  This completes the physical layer.) 1572 SB
450 2063 1602 (Next, there is needed a means to send data over the physical layer, the Data Link) 1602 SB
300 2122 1776 (layer.  This layer will be defined as a master-slave network, where the Pentium server will) 1776 SB
300 2181 1779 (be the master, and each ECB will be a slave.  The decision to make the network a master-) 1779 SB
300 2240 1636 (slave network instead of a idle detect network was based on the fact that resolving) 1636 SB
300 2299 1761 (collisions introduced a complex algorithm that would be hard to code in assembly.  Also,) 1761 SB
300 2358 1719 (it is possible in a idle detect network that one of the stations could get "starved" by the) 1719 SB
300 2417 1748 (network and never get the bus.  On the other hand, the master-slave network consists of) 1748 SB
300 2476 1754 (the master always having explicit control over who has the bus and who gets it next, this) 1754 SB
300 2535 1704 (avoids any possible collisions.  This way queuing is possible and starvation is avoided.) 1704 SB
300 2594 1756 (One drawback to the master-slave network is that it could consist of a lot of idle polling.) 1756 SB
300 2653 1678 (Furthermore, our master-slave network is similar to a broadcast network in that ever) 1678 SB
300 2712 1078 (station will "see" every packet sent, including its' own.) 1078 SB
EJ RS
%%PageTrailer
SS
0 0 25 25 798 1100 300 SM
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
0 0 0 fC
2079 77 21 (3) 21 SB
32 0 0 63 63 1 0 0 58 /Times-Bold /font29 ANSIFont font
300 346 1169 (The definition of the master-slave network:) 1169 SB
32 0 0 42 42 0 0 0 42 /Symbol font
gs 319 3144 0 0 CB
300 482 19 (\267) 19 SB
gr
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
375 479 1633 (The master will be a daemon running on the Pentium server provided by the cs459) 1633 SB
375 538 1712 (class that serves all of the ECB's and interacts with the internet.  A user would have to) 1712 SB
375 597 1224 (open a socket to the daemon in order to communicate with it.) 1224 SB
32 0 0 42 42 0 0 0 42 /Symbol font
gs 319 3144 0 0 CB
300 659 19 (\267) 19 SB
gr
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
375 656 1722 (Each station will have a defined address.  The master will be address $0, and the slaves) 1722 SB
375 715 1685 (address start at $1.  The highest address currently allowed is $F, providing a possible) 1685 SB
375 774 194 (15 slaves.) 194 SB
32 0 0 42 42 0 0 0 42 /Symbol font
gs 319 3144 0 0 CB
300 836 19 (\267) 19 SB
gr
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
375 833 1701 (Only the master can talk and give the bus to a slave ECB.  The ECB in turn talks only) 1701 SB
375 892 1718 (to the master.  If ECB to ECB communication is required, it must be done through the) 1718 SB
375 951 145 (master.) 145 SB
32 0 0 42 42 0 0 0 42 /Symbol font
gs 319 3144 0 0 CB
300 1013 19 (\267) 19 SB
gr
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
375 1010 1612 (The master will have a valid polling list which contains all of the ECB's which are) 1612 SB
375 1069 1674 (currently active.  This list will be used to poll each ECB in order.  A ECB not on the) 1674 SB
375 1128 1655 (polling list will be polled occasionally to see if it is awake.  For a ECB to get on the) 1655 SB
375 1187 1719 (polling list, the ECB must either have a request for data sent to it by a remote host, via) 1719 SB
375 1246 1060 (the internet, or respond to one of the "wakeup" polls.) 1060 SB
32 0 0 42 42 0 0 0 42 /Symbol font
gs 319 3144 0 0 CB
300 1308 19 (\267) 19 SB
gr
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
375 1305 1654 (A ECB that does not respond within a set amount of time to a poll will be taken off) 1654 SB
375 1364 388 (the current poll list.) 388 SB
32 0 0 42 42 0 0 0 42 /Symbol font
gs 319 3144 0 0 CB
300 1426 19 (\267) 19 SB
gr
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
375 1423 1674 (If the slave has nothing to say after the poll, it responds will a simple response to the) 1674 SB
375 1482 598 (master, otherwise data is sent.) 598 SB
32 0 0 42 42 0 0 0 42 /Symbol font
gs 319 3144 0 0 CB
300 1544 19 (\267) 19 SB
gr
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
375 1541 1626 (There is a way to request a retransmit in case a ECB or the master Pentium server) 1626 SB
375 1600 320 (misses a packet.) 320 SB
32 0 0 42 42 0 0 0 42 /Symbol font
gs 319 3144 0 0 CB
300 1662 19 (\267) 19 SB
gr
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
375 1659 1712 (A simple command language universal to all projects, along with undefined commands) 1712 SB
375 1718 1701 (for individual uses will be provided.  An ECB gets the command from the master, and) 1701 SB
375 1777 1523 (then responds to the master with the information requested by the command.) 1523 SB
32 0 0 42 42 0 0 0 42 /Symbol font
gs 319 3144 0 0 CB
300 1839 19 (\267) 19 SB
gr
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
375 1836 1709 (Variable length packets will be provided so that more than 8 bits can be sent at a time.) 1709 SB
32 0 0 42 42 0 0 0 42 /Symbol font
gs 319 3144 0 0 CB
300 1898 19 (\267) 19 SB
gr
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
375 1895 1695 (There will be a maximum length on the packet so as to provide a fair bus.  If a station) 1695 SB
375 1954 1700 (needs to send more data that the maximum length of the packet, it must split the data,) 1700 SB
375 2013 710 (and wait for the next poll to send it.) 710 SB
32 0 0 42 42 0 0 0 42 /Symbol font
gs 319 3144 0 0 CB
300 2075 19 (\267) 19 SB
gr
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
375 2072 1723 (An acknowledgment that the transmission was successful will consist of sending a poll,) 1723 SB
375 2131 410 (and not a retransmit.) 410 SB
32 0 0 42 42 0 0 0 42 /Symbol font
gs 319 3144 0 0 CB
300 2193 19 (\267) 19 SB
gr
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
375 2190 1663 (The ECB communications code will be interrupt driven.  It will send an interrupt on) 1663 SB
375 2249 1592 (every 8 bits transmitted, and an algorithm will decide whether or not to keep the) 1592 SB
375 2308 804 (packet and pass it onto the project code.) 804 SB
EJ RS
%%PageTrailer
SS
0 0 25 25 798 1100 300 SM
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
0 0 0 fC
2079 77 21 (4) 21 SB
32 0 0 63 63 1 0 0 58 /Times-Bold /font29 ANSIFont font
300 405 1023 (Packets on the Master-Slave network:) 1023 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
450 538 1599 (The next step is to define a packet, or frame on the network.  Since we are using) 1599 SB
300 597 1730 (the RS-232 port, and either the PIA or ACIA, we are limited to sending 8 bits at a time) 1730 SB
300 656 1711 (with a start and stop bit.  If only 8 bits were used in each packet, it would take a lot of) 1711 SB
300 715 1753 (network time to send a couple of bytes of data.  This is undesirable.  The solution to this) 1753 SB
300 774 434 (problem is as follows:) 434 SB
450 883 1487 (The minimum frame will consist of 16 bits of which the following fields are) 1487 SB
300 942 159 (defined:) 159 SB
32 0 0 42 42 0 0 0 42 /Symbol font
gs 319 3144 0 0 CB
300 1004 19 (\267) 19 SB
gr
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
375 1001 1714 (The first four bits specify an address, the next four bits specify a command and the last) 1714 SB
375 1060 1707 (8 bits specify the number of packets following this one.  This way only the first packet) 1707 SB
375 1119 862 (has to have the station address information.) 862 SB
32 0 0 42 42 0 0 0 42 /Symbol font
gs 319 3144 0 0 CB
300 1181 19 (\267) 19 SB
gr
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
375 1178 1725 (A simple poll to a station will have the station address, the poll command for the first 8) 1725 SB
375 1237 1558 (bits, and the following 8 bits will contain all zeros signifying no packets will be) 1558 SB
375 1296 201 (following.) 201 SB
32 0 0 42 42 0 0 0 42 /Symbol font
gs 319 3144 0 0 CB
300 1358 19 (\267) 19 SB
gr
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
375 1355 1537 (If a discrete number is present in the second 8 bits, which will be less than the) 1537 SB
375 1414 1676 (maximum length of the frame, it defines the number of following packets that are for) 1676 SB
375 1473 495 (the same station address.) 495 SB
375 1945 1656 (The command field will contain commands that are both universal and user defined.) 1656 SB
375 2004 684 (Required universal commands are:) 684 SB
32 0 0 50 50 1 0 0 45 /Times-Roman /font32 ANSIFont font
600 2122 204 (Command) 204 SB
1200 2122 403 (Numeric assignment) 403 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
600 2181 78 (Poll) 78 SB
1200 2181 25 (0) 25 SB
600 2240 111 (Reset) 111 SB
1200 2240 25 (1) 25 SB
600 2299 102 (Read) 102 SB
1200 2299 25 (2) 25 SB
600 2358 112 (Write) 112 SB
1200 2358 25 (3) 25 SB
600 2417 97 (Start) 97 SB
1200 2417 25 (4) 25 SB
600 2476 94 (Stop) 94 SB
1200 2476 25 (5) 25 SB
600 2535 98 (Cont) 98 SB
1200 2535 25 (6) 25 SB
600 2594 216 (Retransmit) 216 SB
1200 2594 25 (7) 25 SB
450 2712 1547 (The rest of the commands 8-15 are reserved for users.  If more commands are) 1547 SB
300 2771 1148 (required, they can be added by using the extended packet.) 1148 SB
EJ RS
%%PageTrailer
SS
0 0 25 25 798 1100 300 SM
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
0 0 0 fC
2079 77 21 (5) 21 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
300 227 13 ( ) 13 SB
32 0 0 63 63 1 0 0 58 /Times-Bold /font29 ANSIFont font
300 405 811 (Project dependent bus traffic:) 811 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
450 538 1570 (Our user interface to connect with our weather station project with the RS-232) 1570 SB
300 597 1754 (network will be done from a remote machine through the daemon provided by the cs459) 1754 SB
300 656 1750 (class.  It can be a graphical interface, menu driven interface or a command line interface.) 1750 SB
300 715 1185 (Furthermore, we must define the following user commands:) 1185 SB
32 0 0 50 50 1 0 0 45 /Times-Roman /font32 ANSIFont font
450 833 204 (Command) 204 SB
1050 833 403 (Numeric assignment) 403 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
450 892 191 (Currtemp) 191 SB
1050 892 25 (8) 25 SB
450 951 220 (Windspeed) 220 SB
1050 951 25 (9) 25 SB
450 1010 161 (Winddir) 161 SB
1050 1010 50 (10) 50 SB
450 1069 143 (Alldata) 143 SB
1050 1069 50 (11) 50 SB
450 1187 1485 (It is projected that we will implement our project based on a graphical user) 1485 SB
300 1246 1736 (interface which will connect via socket to the master daemon.  From there we would be) 1736 SB
300 1305 1756 (able to monitor temperature, wind speed and wind direction or all of them.  Also and the) 1756 SB
300 1364 1791 (application layer we could plot the results over time to get a graph showing changes in the) 1791 SB
300 1423 1561 (weather.  We also have several unused commands left to work with if anything) 1561 SB
300 1482 402 (unanticipated arises.) 402 SB
32 0 0 63 63 1 0 0 58 /Times-Bold /font29 ANSIFont font
300 1778 794 (Potential bugs and problems:) 794 SB
32 0 0 42 42 0 0 0 42 /Symbol font
gs 319 3144 0 0 CB
300 1914 19 (\267) 19 SB
gr
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
375 1911 1658 (Constant traffic on the bus:  This problem would exist if the master always polls the) 1658 SB
375 1970 1673 (stations in the current polling list, but the stations have nothing to say.  To solve this) 1673 SB
375 2029 1657 (problem a time-out would be defined in which if previously the ECB had nothing to) 1657 SB
375 2088 1708 (say, what a set amount of time before re-polling.  This timer could be over ridden by a) 1708 SB
375 2147 1038 (request from the remote host machine to the master.) 1038 SB
32 0 0 42 42 0 0 0 42 /Symbol font
gs 319 3144 0 0 CB
300 2268 19 (\267) 19 SB
gr
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
375 2265 1674 (Station "waking up" and seeing what looks like a poll:  This could happen if an ECB) 1674 SB
375 2324 1679 (gets reset and starts looking at the bus waiting for a poll from the master to respond,) 1679 SB
375 2383 1691 (and another station happens to transmit a frame that looks identical to a poll from the) 1691 SB
375 2442 1717 (master.  This is possible because the station address is only included in the initial frame) 1717 SB
375 2501 1672 (and a count of how many frames will be following.  To solve this problem we would) 1672 SB
375 2560 1604 (define a short amount of time that the ECB waits to respond to a poll.  If there is) 1604 SB
375 2619 1709 (traffic on the network between the seen poll and the delay time, the ECB assumes that) 1709 SB
375 2678 356 (it was a false poll.) 356 SB
32 0 0 42 42 0 0 0 42 /Symbol font
gs 319 3144 0 0 CB
300 2799 19 (\267) 19 SB
gr
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
375 2796 1581 (Speed:  The speed of the network could be slow if several projects have a lot of) 1581 SB
375 2855 1235 (information to send.  This problem is not resolved at this time.) 1235 SB
EJ RS
%%PageTrailer
SS
0 0 25 25 798 1100 300 SM
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
0 0 0 fC
2079 77 21 (6) 21 SB
32 0 0 42 42 0 0 0 42 /Symbol font
gs 319 3144 0 0 CB
300 289 19 (\267) 19 SB
gr
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
375 286 1721 (Security:  It is possible that anyone from the Internet could come into our server, hook) 1721 SB
375 345 1709 (onto the socket and destroy the project.  This presents a challenge and will most likely) 1709 SB
375 404 570 (be solved by the cs459 class.) 570 SB
EJ RS
%%PageTrailer
%%Trailer
SVDoc restore
end
% TrueType font name key:
%    MSTT310000 = 
%    MSTT310000 = 
%    MSTT310000 = 
%    MSTT310000 = 
%    MSTT31c1ee = 09e7DTimes New RomanF0000003f000001900000
%    MSTT31c1fb = 09e7DTimes New RomanF00000032000001900000
%    MSTT31c208 = 09e7DTimes New RomanF0000002a000001900000
%    MSTT31c215 = 09e7DTimes New RomanF0000003f000002bc0000
%%DocumentSuppliedResources: procset Win35Dict 3 1

%%DocumentNeededResources: font Symbol
%%+ font Times-Bold
%%+ font Times-Roman

%%EOF
